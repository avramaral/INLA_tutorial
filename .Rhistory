plot(mesh)
plot(USA$geometry, lwd = 2, border = "red", add = TRUE)
points(data_USA$lon, data_USA$lat, pch = 1, col = "green")
}
# Building the SPDE model
# alpha = nu + d / 2 = 1 + 1 = 2, for nu = 1
# Flexible parameterization (with a default one)
# spde <- inla.spde2.matern(mesh = mesh, alpha = 2)
# Parameterization for PC priors
spde <- inla.spde2.pcmatern(mesh = mesh,
alpha = 2,
prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90
prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01
# Indices
indxs <- inla.spde.make.index("s", spde$n.spde)
# Projection matrix
A <- inla.spde.make.A(mesh = mesh, loc = data_coor)
# Prediction
coord_pred <- create_prediction_grid(USA)
saveRDS(object = coord_pred, file = "data/example_4/coord_pred.RDS")
{
coord_pred_cp <- as.data.frame(coord_pred)
coordinates(coord_pred_cp) <- ~ x + y
plot(coord_pred_cp)
}
# Projection matrix for prediction
Ap <- inla.spde.make.A(mesh = mesh, loc = coord_pred)
# Create stacks
# Stack for estimation
stk_e <- inla.stack(tag = "est",
data = list(y = data_USA$mean),
A = list(1, A),
effects = list(data.frame(b0 = rep(1, nrow(data_USA))), s = indxs))
# Stack for prediction
stk_p <- inla.stack(tag = "pred",
data = list(y = NA),
A = list(1, Ap),
effects = list(data.frame(b0 = rep(1, nrow(coord_pred))), s = indxs))
# Full stack
stk_full <- inla.stack(stk_e, stk_p)
# Fit model
formula_1 <- y ~ 0 + b0 + f(s, model = spde)
model_4_1 <- inla(formula = formula_1,
family  = "gaussian",
data = inla.stack.data(stk_full),
control.predictor = list(compute = TRUE,
A = inla.stack.A(stk_full))) # Matrix of predictors
saveRDS(object = model_4_1, file = "models/model_4_1.RDS")
summary(model_4_1)
# Posteriors
ss <- inla.tmarginal(fun = function(x) { 1 / sqrt(x) }, marginal = model_4_1$marginals.hyperpar$`Precision for the Gaussian observations`)
ggplot(data.frame(inla.smarginal(ss))) +
geom_line(aes(x, y)) +
labs(x = "", y = "", title = "Posterior of the standard deviation for the observations") +
custom_theme
ggplot(data.frame(inla.smarginal(model_4_1$marginals.hyperpar$`Range for s`))) +
geom_line(aes(x, y)) +
labs(x = "", y = "", title = "Posterior of the range in the Matérn model") +
custom_theme
ggplot(data.frame(inla.smarginal(model_4_1$marginals.hyperpar$`Stdev for s`))) +
geom_line(aes(x, y)) +
labs(x = "", y = "", title = "Posterior of the standard deviation in the Matérn model") +
custom_theme
# According to this parameterization: https://becarioprecario.bitbucket.io/spde-gitbook/ch-intro.html#sec:matern
# range = sqrt(8 * smoothness) / scale
# Fitted values and prediction
idxs_pred <- inla.stack.index(stk_full, tag = "pred")$data
pred_mm <- as.data.frame(cbind(coord_pred, model_4_1$summary.fitted.values[idxs_pred, "mean"]))
pred_ll <- as.data.frame(cbind(coord_pred, model_4_1$summary.fitted.values[idxs_pred, "0.025quant"]))
pred_uu <- as.data.frame(cbind(coord_pred, model_4_1$summary.fitted.values[idxs_pred, "0.975quant"]))
r_mm <- pred_mm$V3 %>% range()
r_ll <- pred_ll$V3 %>% range()
r_uu <- pred_uu$V3 %>% range()
r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))
pp_mm <- plot_pred_USA(fitted_values = pred_mm, USA = USA, r = r, tt = "Mean")
pp_ll <- plot_pred_USA(fitted_values = pred_ll, USA = USA, r = r, tt = "2.5th")
pp_uu <- plot_pred_USA(fitted_values = pred_uu, USA = USA, r = r, tt = "97.5th")
(pp_ll + pp_mm + pp_uu) + plot_layout(guides = "collect") & theme(legend.position = "right")
source("R/header.R")
data_USA <- readRDS(file = "data/example_4/data_USA.rds")
USA <- readRDS(file = "data/example_4/USA_filtered.rds")
ggplot() +
geom_sf(data = USA, fill = "white") +
geom_sf(data = data_USA, color = "black", size = 3, shape = 3) +
labs(x = "", y = "", title = "") +
custom_theme +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks  = element_blank())
mesh <- readRDS(file = "data/example_4/mesh.RDS")
# Priors might differ
spde <- inla.spde2.pcmatern(mesh = mesh,
alpha = 2,
prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90
prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01
dual_mesh <- inla.dual.mesh(mesh)
saveRDS(object = dual_mesh, file = "data/example_5/dual_mesh.RDS")
#########################
#########################
# As before...
# Points coordinates
data_coor <- sf::st_coordinates(data_USA)
data_USA  <- bind_cols(data_USA, as_tibble(data_coor))
data_USA  <- data_USA %>% rename(lon = X, lat = Y) %>% dplyr::select(mean, sd, lon, lat, geometry)
# Boundary coordinates
USA_coor <- sf::st_coordinates(USA)
USA_coor <- matrix(c(USA_coor[, 1], USA_coor[, 2]), ncol = 2)
colnames(USA_coor) <- c("lon", "lat")
#########################
#########################
USA_poly <- SpatialPolygons(list(Polygons(list(Polygon(USA_coor)), ID = "1")))
wgt <- sapply(1:length(dual_mesh), function (i) {
if (gIntersects(dual_mesh[i, ], USA_poly)) {
return(gArea(gIntersection(dual_mesh[i, ], USA_poly)))
} else {
return(0)
}
})
saveRDS(object = wgt, file = "data/example_5/wgt.RDS")
sum(wgt) # Area of the study region
{
plot(mesh$loc, asp = 1, col = (wgt == 0) + 1, pch = 19, xlab = "", ylab = "", axes = F)
plot(dual_mesh, add = TRUE)
plot(USA$geometry, add = TRUE, border = "green", lwd = 2)
}
# Data and projection matrices
n_vtx <- mesh$n
n_pts <- nrow(data_USA)
# Indices
indxs <- inla.spde.make.index("s", spde$n.spde)
# augmented data: `0` for the mesh nodes and `1` for the observations
y_pp <- rep(0:1, c(n_vtx, n_pts))
# Exposure vector
e_pp <- c(wgt, rep(0, n_pts))
# Projection matrix (in two parts)
# (1) For the integration points, this is just a diagonal matrix—as these locations are just the mesh vertices
imat <- Diagonal(n_vtx, rep(1, n_vtx))
# (2) For the observed points, the projection matrix is defined with `inla.spde.make.A`
ymat <- inla.spde.make.A(mesh, data_coor)
# (1) + (2)
A_pp <- rbind(imat, ymat)
coord_pred <- readRDS(file = "data/example_4/coord_pred.RDS")
n_pts_pred <- nrow(coord_pred)
# Prediction
A_pp_p <- inla.spde.make.A(mesh = mesh, loc = coord_pred) # Projection matrix for the prediction points
# Create stacks
# Stack for estimation
stk_pp_e <- inla.stack(tag = "est_pp",
data = list(y = y_pp, e = e_pp),
A = list(1, A_pp),
effects = list(alpha_pp = rep(1, n_vtx + n_pts), s = indxs))
stk_pp_p <- inla.stack(tag = "pred_pp",
data = list(y = rep(NA, n_pts_pred), e = rep(1, n_pts_pred)),
A = list(1, A_pp_p),
effects = list(alpha_pp = rep(1, n_pts_pred), s = indxs))
# Full stack
stk_full_pp <- inla.stack(stk_pp_e, stk_pp_p)
# Fitting the model
formula_1 <- y ~ 0 + alpha_pp + f(s, model = spde)
model_5_1 <- inla(formula = formula_1,
family  = "poisson",
E = inla.stack.data(stk_full_pp)$e,
data = inla.stack.data(stk_full_pp),
control.predictor = list(link = 1,
compute = TRUE,
A = inla.stack.A(stk_full_pp)))
saveRDS(object = model_5_1, file = "models/model_5_1.RDS")
summary(model_5_1)
# Fitted values and prediction
idx_pp <- inla.stack.index(stk_full_pp, tag = "pred_pp")$data
pred_pp_mm <- as.data.frame(cbind(coord_pred, model_5_1$summary.fitted.values[idx_pp, "mean"]))
pred_pp_ll <- as.data.frame(cbind(coord_pred, model_5_1$summary.fitted.values[idx_pp, "0.025quant"]))
pred_pp_uu <- as.data.frame(cbind(coord_pred, model_5_1$summary.fitted.values[idx_pp, "0.975quant"]))
# Expected number of observations
sum(pred_pp_mm$V3 * (25 ** 2))
r_mm <- pred_pp_mm$V3 %>% range()
r_ll <- pred_pp_ll$V3 %>% range()
r_uu <- pred_pp_uu$V3 %>% range()
r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))
pp_pp_mm <- plot_pred_USA(fitted_values = pred_pp_mm, USA = USA, r = r, tt = "Mean",   should_round = FALSE)
pp_pp_ll <- plot_pred_USA(fitted_values = pred_pp_ll, USA = USA, r = r, tt = "2.5th",  should_round = FALSE)
pp_pp_uu <- plot_pred_USA(fitted_values = pred_pp_uu, USA = USA, r = r, tt = "97.5th", should_round = FALSE)
(pp_pp_ll + pp_pp_mm + pp_pp_uu) + plot_layout(guides = "collect") & theme(legend.position = "right")
source("R/header.R")
data_USA <- readRDS(file = "data/example_4/data_USA.rds")
USA <- readRDS(file = "data/example_4/USA_filtered.rds")
ggplot() +
geom_sf(data = USA, fill = "white") +
geom_sf(data = data_USA, aes(fill = mean), color = "black", size = 3, shape = 21) +
scale_fill_gradientn(name = "PM2.5 level", colors = rainbow(9, start = 0.1, end = 0.9)) +
labs(x = "", y = "", title = "") +
custom_theme +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks  = element_blank())
mesh <- readRDS(file = "data/example_4/mesh.RDS")
dual_mesh <- readRDS(file = "data/example_5/dual_mesh.RDS")
wgt <- readRDS(file = "data/example_5/wgt.RDS")
# Priors might differ
spde <- inla.spde2.pcmatern(mesh = mesh,
alpha = 2,
prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90
prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01
# spde <- inla.spde2.matern(mesh = mesh, alpha = 2)
#########################
#########################
# As before...
# Points coordinates
data_coor <- sf::st_coordinates(data_USA)
data_USA  <- bind_cols(data_USA, as_tibble(data_coor))
data_USA  <- data_USA %>% rename(lon = X, lat = Y) %>% dplyr::select(mean, sd, lon, lat, geometry)
# Boundary coordinates
USA_coor <- sf::st_coordinates(USA)
USA_coor <- matrix(c(USA_coor[, 1], USA_coor[, 2]), ncol = 2)
colnames(USA_coor) <- c("lon", "lat")
#########################
#########################
# Data and projection matrices
n_vtx <- mesh$n
n_pts <- nrow(data_USA)
coord_pred <- readRDS(file = "data/example_4/coord_pred.RDS")
n_pts_pred <- nrow(coord_pred)
indxs <- inla.spde.make.index("s", spde$n.spde)
indxv <- inla.spde.make.index("v", spde$n.spde)
y_pp <- rep(0:1, c(n_vtx, n_pts))
e_pp <- c(wgt, rep(0, n_pts))
imat <- Diagonal(n_vtx, rep(1, n_vtx))
ymat <- inla.spde.make.A(mesh, data_coor)
A_pp <- rbind(imat, ymat)
# Prediction
A_pp_p <- inla.spde.make.A(mesh = mesh, loc = coord_pred)
# Create stacks
# `data` has two columns, one for each likelihood
stk_y_e <- inla.stack(tag = "est_y",
data = list(y = cbind(data_USA$mean, NA), e = rep(NA, n_pts)),
A = list(1, ymat),
effects = list(mu = rep(1, n_pts), s = indxs))
stk_y_p <- inla.stack(tag = "pred_y",
data = list(y = cbind(rep(NA, n_pts_pred), NA), e = rep(NA, n_pts_pred)),
A = list(1, A_pp_p),
effects = list(mu = rep(1, n_pts_pred), s = indxs))
stk_pp_e <- inla.stack(tag = "est_pp",
data = list(y = cbind(NA, y_pp), e = e_pp),
A = list(1, A_pp),
effects = list(alpha_pp = rep(1, n_vtx + n_pts), v = indxv))
stk_pp_p <- inla.stack(tag = "pred_pp",
data = list(y = cbind(NA, rep(NA, n_pts_pred)), e = rep(1, n_pts_pred)),
A = list(1, A_pp_p),
effects = list(alpha_pp = rep(1, n_pts_pred), v = indxv))
# Full stack
stk_full_pp_y <- inla.stack(stk_y_e, stk_y_p, stk_pp_e, stk_pp_p)
# Fitting the model
re_prior <- list(prior = "gaussian", param = c(0, 1))
formula_1 <- y ~ 0 + mu + alpha_pp + f(s, model = spde) + f(v, copy = "s", fixed = FALSE, hyper = list(beta = re_prior))
model_6_1 <- inla(formula = formula_1,
family  = c("gaussian", "poisson"),
E = inla.stack.data(stk_full_pp_y)$e,
data = inla.stack.data(stk_full_pp_y),
control.predictor = list(link = rep(c(1, 2), c((n_pts + n_pts_pred), (n_vtx + n_pts + n_pts_pred))),
compute = TRUE,
A = inla.stack.A(stk_full_pp_y)))
saveRDS(object = model_6_1, file = "models/model_6_1.RDS")
summary(model_6_1)
ggplot(data.frame(inla.smarginal(model_6_1$marginals.hyperpar$`Beta for v`))) +
geom_line(aes(x, y)) +
labs(x = "", y = "", title = "Posterior of the degree of preferentiality (gamma)") +
custom_theme
# Fitted values and prediction
## Response
idx_y  <- inla.stack.index(stk_full_pp_y, tag = "pred_y" )$data
pred_y_mm  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  "mean"]))
pred_y_ll  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  "0.025quant"]))
pred_y_uu  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  "0.975quant"]))
r_mm <- pred_y_mm$V3 %>% range()
r_ll <- pred_y_ll$V3 %>% range()
r_uu <- pred_y_uu$V3 %>% range()
r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))
pp_y_mm <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = "Mean")
pp_y_ll <- plot_pred_USA(fitted_values = pred_y_ll, USA = USA, r = r, tt = "2.5th")
pp_y_uu <- plot_pred_USA(fitted_values = pred_y_uu, USA = USA, r = r, tt = "97.5th")
(pp_y_ll + pp_y_mm + pp_y_uu) + plot_layout(guides = "collect") & theme(legend.position = "right")
## Intensity process
idx_pp <- inla.stack.index(stk_full_pp_y, tag = "pred_pp")$data
pred_pp_mm <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, "mean"]))
pred_pp_ll <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, "0.025quant"]))
pred_pp_uu <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, "0.975quant"]))
# Expected number of observations
sum(pred_pp_mm$V3 * (25 ** 2))
r_mm <- pred_pp_mm$V3 %>% range()
r_ll <- pred_pp_ll$V3 %>% range()
r_uu <- pred_pp_uu$V3 %>% range()
r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))
pp_pp_mm <- plot_pred_USA(fitted_values = pred_pp_mm, USA = USA, r = r, tt = "Mean",   should_round = FALSE)
pp_pp_ll <- plot_pred_USA(fitted_values = pred_pp_ll, USA = USA, r = r, tt = "2.5th",  should_round = FALSE)
pp_pp_uu <- plot_pred_USA(fitted_values = pred_pp_uu, USA = USA, r = r, tt = "97.5th", should_round = FALSE)
(pp_pp_ll + pp_pp_mm + pp_pp_uu) + plot_layout(guides = "collect") & theme(legend.position = "right")
source("R/header.R")
data_USA <- readRDS(file = "data/example_4/data_USA.rds")
USA <- readRDS(file = "data/example_4/USA_filtered.rds")
mesh <- readRDS(file = "data/example_4/mesh.RDS")
dual_mesh <- readRDS(file = "data/example_5/dual_mesh.RDS")
wgt <- readRDS(file = "data/example_5/wgt.RDS")
coord_pred <- readRDS(file = "data/example_4/coord_pred.RDS")
# Priors might differ
spde <- inla.spde2.pcmatern(mesh = mesh,
alpha = 2,
prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90
prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01
#########################
#########################
# As before...
# Points coordinates
data_coor <- sf::st_coordinates(data_USA)
data_USA  <- bind_cols(data_USA, as_tibble(data_coor))
data_USA  <- data_USA %>% rename(lon = X, lat = Y) %>% dplyr::select(mean, sd, lon, lat, geometry)
# Boundary coordinates
USA_coor <- sf::st_coordinates(USA)
USA_coor <- matrix(c(USA_coor[, 1], USA_coor[, 2]), ncol = 2)
colnames(USA_coor) <- c("lon", "lat")
#########################
#########################
# Basis function
bandwidth <- 2500
smoothing_kernel <- "Wendland"
# center_pts <- as.matrix(rbind(c(-1600, 5307), c(  300, 3800), c( 1114, 4229),
#                               c( -800, 4300), c(  263, 4987), c(-2000, 4500)))
center_pts <- as.matrix(rbind(c(-2372, 4346), c(-1984, 5363), c( -918, 5143),
c( -518, 3817), c(  263, 4987), c(  677, 4096),
c( 1494, 4720), c( -198, 4291), c(-1710, 4513),
c(  875, 3602), c(-1202, 3742), c(-1310, 4946),
c( -190, 5189), c(  920, 4550), c( -233, 4800)))
bfs      <- basis_functions(center_pts = center_pts, loct = data_coor,  mesh = mesh, smoothing_kernel = smoothing_kernel, bandwidth = bandwidth)
bfs_pred <- basis_functions(center_pts = center_pts, loct = coord_pred, mesh = NULL, smoothing_kernel = smoothing_kernel, bandwidth = bandwidth)
pps <- list()
for (i in 1:nrow(center_pts)) {
pps[[i]] <- plot_pred_USA(fitted_values = as.data.frame(cbind(coord_pred, bfs_pred[[i]])), USA = USA, r = c(0, 1), tt = paste("Wendland ", i, sep = ""))
}
((pps[[1]] + pps[[2]] + pps[[3]]) /
(pps[[4]] + pps[[5]] + pps[[6]])) + plot_layout(guides = "collect") & theme(legend.position = "right")
# Data and projection matrices
n_vtx <- mesh$n
n_pts <- nrow(data_USA)
n_pts_pred <- nrow(coord_pred)
indx <- 1:spde$n.spde
y_pp <- rep(0:1, c(n_vtx, n_pts))
e_pp <- c(wgt, rep(0, n_pts))
imat <- Diagonal(n_vtx, rep(1, n_vtx))
ymat <- inla.spde.make.A(mesh, data_coor)
# Estimation
A_pp_base <- rbind(imat, ymat)
n_basis_functions <- nrow(center_pts)
A_pp <- list()
for (i in 1:n_basis_functions) {
A_pp[[i]] <- A_pp_base * bfs[[i]] # Multiply each column by the basis function evaluated at the corresponding locations
}
# Prediction
A_pp_p_base <- inla.spde.make.A(mesh = mesh, loc = as.matrix(coord_pred))
A_pp_p <- list()
for (i in 1:n_basis_functions) {
A_pp_p[[i]] <- A_pp_p_base * bfs_pred[[i]]
}
# Create stacks
#########################
# Create a list of effects based on the number of basis function
#########################
fx_effects <- list(rep(1, n_vtx + n_pts))
rd_effects <- list()
for (i in 1:length(A_pp)) { rd_effects <- append(rd_effects, list(indx)) }
effects <- append(fx_effects, rd_effects)
names(effects) <- c("alpha_pp", paste("v_", 1:length(A_pp), sep = ""))
effects_pred <- effects
effects_pred[[1]] <- rep(1, times = n_pts_pred)
#########################
#########################
# Stacks for `y` are similar to before; however, stacks for `pp` have different structures for `A` and `effects`
stk_y_e <- inla.stack(tag = "est_y",
data = list(y = cbind(data_USA$mean, NA), e = rep(NA, n_pts)),
A = list(1, ymat),
effects = list(mu = rep(1, n_pts), s = indx))
stk_y_p <- inla.stack(tag = "pred_y",
data = list(y = cbind(rep(NA, n_pts_pred), NA), e = rep(NA, n_pts_pred)),
A = list(1, A_pp_p_base),
effects = list(mu = rep(1, n_pts_pred), s = indx))
stk_pp_e <- inla.stack(tag = "est_pp",
data = list(y = cbind(NA, y_pp), e = e_pp),
A = append(1, A_pp),
effects = effects)
stk_pp_p <- inla.stack(tag = "pred_pp",
data = list(y = cbind(NA, rep(NA, n_pts_pred)), e = rep(1, n_pts_pred)),
A = append(1, A_pp_p),
effects = effects_pred)
# Full stack
stk_full_pp_y <- inla.stack(stk_y_e, stk_y_p, stk_pp_e, stk_pp_p)
re_prior <- list(prior = "gaussian", param = c(0, 1))
random_effects <- paste(paste("f(v_",  1:length(A_pp), ", copy = \"s\", fixed = FALSE, hyper = list(beta = re_prior))", sep = ""), collapse = " + ")
formula_1 <- paste("y ~ 0 + mu + alpha_pp + f(s, model = spde) + ", random_effects, sep = "")
formula_1 <- eval(parse(text = formula_1))
formula_1
model_7_1 <- inla(formula = formula_1,
family  = c("gaussian", "poisson"),
E = inla.stack.data(stk_full_pp_y)$e,
data = inla.stack.data(stk_full_pp_y),
control.predictor = list(link = rep(c(1, 2), c((n_pts + n_pts_pred), (n_vtx + n_pts + n_pts_pred))),
compute = TRUE,
A = inla.stack.A(stk_full_pp_y)))
saveRDS(object = model_7_1, file = "models/model_7_1.RDS")
summary(model_7_1)
# Fitted values and prediction
## Response
idx_y  <- inla.stack.index(stk_full_pp_y, tag = "pred_y" )$data
pred_y_mm  <- as.data.frame(cbind(coord_pred, model_7_1$summary.fitted.values[idx_y,  "mean"]))
pred_y_ll  <- as.data.frame(cbind(coord_pred, model_7_1$summary.fitted.values[idx_y,  "0.025quant"]))
pred_y_uu  <- as.data.frame(cbind(coord_pred, model_7_1$summary.fitted.values[idx_y,  "0.975quant"]))
r_mm <- pred_y_mm$V3 %>% range()
r_ll <- pred_y_ll$V3 %>% range()
r_uu <- pred_y_uu$V3 %>% range()
r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))
pp_y_mm <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = "Mean")
pp_y_ll <- plot_pred_USA(fitted_values = pred_y_ll, USA = USA, r = r, tt = "2.5th")
pp_y_uu <- plot_pred_USA(fitted_values = pred_y_uu, USA = USA, r = r, tt = "97.5th")
(pp_y_ll + pp_y_mm + pp_y_uu) + plot_layout(guides = "collect") & theme(legend.position = "right")
## Intensity process
idx_pp <- inla.stack.index(stk_full_pp_y, tag = "pred_pp")$data
pred_pp_mm <- as.data.frame(cbind(coord_pred, model_7_1$summary.fitted.values[idx_pp, "mean"]))
pred_pp_ll <- as.data.frame(cbind(coord_pred, model_7_1$summary.fitted.values[idx_pp, "0.025quant"]))
pred_pp_uu <- as.data.frame(cbind(coord_pred, model_7_1$summary.fitted.values[idx_pp, "0.975quant"]))
# Expected number of observations
sum(pred_pp_mm$V3 * (25 ** 2))
r_mm <- pred_pp_mm$V3 %>% range()
r_ll <- pred_pp_ll$V3 %>% range()
r_uu <- pred_pp_uu$V3 %>% range()
r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))
pp_pp_mm <- plot_pred_USA(fitted_values = pred_pp_mm, USA = USA, r = r, tt = "Mean",   should_round = FALSE)
pp_pp_ll <- plot_pred_USA(fitted_values = pred_pp_ll, USA = USA, r = r, tt = "2.5th",  should_round = FALSE)
pp_pp_uu <- plot_pred_USA(fitted_values = pred_pp_uu, USA = USA, r = r, tt = "97.5th", should_round = FALSE)
(pp_pp_ll + pp_pp_mm + pp_pp_uu) + plot_layout(guides = "collect") & theme(legend.position = "right")
## Degree of preferentiality
# TBD
((pps[[ 1]] + pps[[ 2]] + pps[[ 3]]) /
(pps[[ 4]] + pps[[ 5]] + pps[[ 6]]) /
(pps[[ 7]] + pps[[ 8]] + pps[[ 9]]) /
(pps[[10]] + pps[[11]] + pps[[12]]) /
(pps[[13]] + pps[[14]] + pps[[15]])) + plot_layout(guides = "collect") & theme(legend.position = "right")
model_7_1
n_basis_functions
n_hyperparameter <- nrow(model_7_1$summary.hyperpar)
n_hyperparameter
model_7_1$summary.hyperpar[((n_hyperparameter - n_base_functions + 1):n_hyperparameter), "mean"][1:n_coord_pr]
model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"][1:n_coord_pr]
model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"]
model_7_1
summary(model_7_1)
n_basis_functions
n_hyperparameter <- nrow(model_7_1$summary.hyperpar)
coeff <- model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"][1:n_coord_pr]
coeff <- model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"]
coeff
n_basis_functions
n_hyperparameter <- nrow(model_7_1$summary.hyperpar)
coeff <- model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"]
value <- rep(0, n_basis_functions)
bfs_pred_tmp
bfs_pred
[1:n_coord_pr]
bfs_pred[[i]]
n_pts_pred
bfs_pred_tmp <- bfs_pred[[i]]
bfs_pred_tmp
value + (bfs_pred_tmp * coeff[i])
bfs_pred_tmp
coeff[i]
(bfs_pred_tmp * coeff[i])
value
n_basis_functions
n_hyperparameter <- nrow(model_7_1$summary.hyperpar)
coeff <- model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"]
value <- rep(0, n_pts_pred)
for (i in 1:n_basis_functions) {
bfs_pred_tmp <- bfs_pred[[i]]
value <- value + (bfs_pred_tmp * coeff[i])
}
value
pred_pp_mm
summary(model_7_1)
n_basis_functions
n_hyperparameter <- nrow(model_7_1$summary.hyperpar)
coeff <- model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"]
value <- rep(0, n_pts_pred)
for (i in 1:n_basis_functions) {
bfs_pred_tmp <- bfs_pred[[i]]
value <- value + (bfs_pred_tmp * coeff[i])
}
pref_mm <- as.data.frame(cbind(coord_pred, value))
n_basis_functions
n_hyperparameter <- nrow(model_7_1$summary.hyperpar)
coeff <- model_7_1$summary.hyperpar[((n_hyperparameter - n_basis_functions + 1):n_hyperparameter), "mean"]
value <- rep(0, n_pts_pred)
for (i in 1:n_basis_functions) {
bfs_pred_tmp <- bfs_pred[[i]]
value <- value + (bfs_pred_tmp * coeff[i])
}
pref_mm <- as.data.frame(cbind(coord_pred, value))
pp_pref_mm <- plot_pred_USA(fitted_values = pred_pp_mm, USA = USA, r = r, tt = "Mean",   should_round = FALSE)
pp_pref_mm
pp_pref_mm <- plot_pred_USA(fitted_values = pref_mm, USA = USA, r = r, tt = "Mean"
pp_pref_mm <- plot_pred_USA(fitted_values = pref_mm, USA = USA, r = r, tt = "Preferentiality surface")
pref_mm <- as.data.frame(cbind(coord_pred, value))
pref_mm
plot_pred_USA(fitted_values = pref_mm, USA = USA, r = r, tt = "Preferentiality surface")
pref_mm$value %>% range
plot_pred_USA(fitted_values = pref_mm, USA = USA, r = range(pref_mm$value), tt = "Preferentiality surface")
plot_pred_USA(fitted_values = pref_mm, USA = USA, r = range(pref_mm$value), tt = "Preferentiality surface", should_round = FALSE)
