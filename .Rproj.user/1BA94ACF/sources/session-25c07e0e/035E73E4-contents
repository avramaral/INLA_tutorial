library("RandomFields")
library("raster")
library("spatstat")
library("maptools")
library("sf")

library("INLA")
inla.setOption(pardiso.license = "pardiso.lic")
inla.setOption(inla.mode = c("classic", "experimental"))

library("rgeos")
library("deldir")

source("https://raw.githubusercontent.com/avramaral/preferential_sampling/master/functions_aux.R")
source("https://raw.githubusercontent.com/avramaral/preferential_sampling/master/functions_data_generation.R")


g <- function (alpha, latt, pref, numObs, ...) {
  lambda <- latt
  values(lambda) <- exp(alpha + values(pref) * values(latt))
  expObs <- sum(values(lambda) * prod(res(lambda)))
  result <- (expObs - numObs) ^ 2
  result
}

set.seed(1)

xlim <- c(0, 10)
ylim <- c(0, 10)
by <- 0.05
mu <- 2
nu <- 1
scl <- 2
sig2 <- 0.5
sig2_error <- 0.1

n_points <- NULL
pref_sampling <- TRUE

N_sce <- 1 # 1:5
N_sim <- 200
sample_size <- c(25, 50, 100, 200, 500, 1000, 2000) 

for (i in N_sce) {
  print(paste("Scenario: ", sprintf("%02d", i), sep = ""))
  for (s in sample_size) {
    print(paste("Sample size: ", s, sep = ""))
    
    pb <- txtProgressBar(min = 1, max = N_sim, initial = 1) 
    
    result <- list()
    for (n in 1:N_sim) {
      
      f <- select_preferentiality_function(x = i)
      
      if (s == 25) { maximum <- 6 } else if (s == 50) { maximum <- 4 } else if (s == 100) { maximum <- 3 }  else if (s == 200) { maximum <- 2.5 } else if (s == 500) { maximum <- 1 } else if (s == 1000) { maximum <- 0.5 } else if (s == 2000) { maximum <- 0.25 }
      
      latt <- latt_generation(xlim = xlim, ylim = ylim, by = by, nu = nu, scl = scl, sig2 = sig2, seed = sample(x = 1:1e6, size = 1))
      pref <- pref_generation(xlim = xlim, ylim = ylim, by = by, f = f, maximum = maximum)
      
      alpha <- optimize(f = g, interval = c(-100, 100), latt = latt, pref = pref, numObs = s)$minimum
      
      loct <- sample_location(latt = latt, pref = pref, n_points = n_points, alpha = alpha, pref_sampling = pref_sampling, seed = sample(x = 1:1e6, size = 1))
      Yobs <- observed_values(latt = latt, loct = loct$loct, mu = mu, sig2_error = sig2_error, seed = sample(x = 1:1e6, size = 1))
      orig <- latt; values(orig) <- values(orig) + mu
      
      if (TRUE) {
        par(mfrow = c(1, 4))
        plot(latt, main = "Latent process")
        plot(pref, main = "Preferentiality process")
        plot(loct$lambda, main = "Lambda")
        plot(orig, main = "Original process")
        plot(loct$loct, add = TRUE, pch = 21, col = rgb(0, 0, 0, 1))
        par(mfrow = c(1, 1))
      }
      
      result[[n]] <- list(latt = latt, pref = pref, loct = loct, Yobs = Yobs, orig = orig, alpha = alpha)
      setTxtProgressBar(pb, n)
    }
    saveRDS(result, file = paste("DATA/", sprintf("%02d", i), "/", s, ".rds", sep = ""))
    close(pb)
  }
}
