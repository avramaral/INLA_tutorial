{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        0,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        0,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        0,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "  gridded(fitted_values) <- TRUE",
        "+ ",
        "  fitted_values <- raster(fitted_values)",
        "+ ",
        "  crs(fitted_values) <- \"+init=epsg:6345 +units=km +no_defs\"",
        "+ ",
        "  ",
        "+ ",
        "  fitted_values    <- as(fitted_values, \"SpatialPixelsDataFrame\")",
        "+ ",
        "  fitted_values_df <- as.data.frame(fitted_values)",
        "+ ",
        "  colnames(fitted_values_df) <- c(\"pred\", \"x\", \"y\")",
        "+ ",
        "  ",
        "+ ",
        "  if (should_round) {",
        "+ ",
        "    breaks <- seq(floor(r[1]), ceiling(r[2]), length.out = 5)",
        "+ ",
        "  } else {",
        "+ ",
        "    breaks <- seq(r[1], r[2], length.out = 5)",
        "+ ",
        "  }",
        "+ ",
        "  pp <- ggplot() +",
        "+ ",
        "    geom_tile(data = fitted_values_df, mapping = aes(x = x, y = y, fill = pred)) + ",
        "+ ",
        "    geom_sf(data = USA, color = \"black\", fill = NA, lwd = 0.5) +",
        "+ ",
        "    scale_fill_gradientn(name = \"PM2.5\", colors = rainbow(9, start = 0.1, end = 0.9), breaks = breaks, limits = c(breaks[1], tail(breaks, 1))) + ",
        "+ ",
        "    labs(x = \"\", y = \"\", title = tt) + ",
        "+ ",
        "    custom_theme + ",
        "+ ",
        "    theme(axis.text.x = element_blank(),",
        "+ ",
        "          axis.text.y = element_blank(),",
        "+ ",
        "          axis.ticks  = element_blank())",
        "+ ",
        "  ",
        "+ ",
        "  pp",
        "+ ",
        "} ",
        "> ",
        "> ",
        "##################################################",
        "> ",
        "##################################################",
        "> ",
        "> ",
        "data_USA <- readRDS(file = \"data/example_4/data_USA.rds\")",
        "> ",
        "USA <- readRDS(file = \"data/example_4/USA_filtered.rds\")",
        "> ",
        "> ",
        "ggplot() + ",
        "+ ",
        "  geom_sf(data = USA, fill = \"white\") +",
        "+ ",
        "  geom_sf(data = data_USA, aes(fill = mean), color = \"black\", size = 3, shape = 21) +",
        "+ ",
        "  scale_fill_gradientn(name = \"PM2.5 level\", colors = rainbow(9, start = 0.1, end = 0.9)) + ",
        "+ ",
        "  labs(x = \"\", y = \"\", title = \"\") +",
        "+ ",
        "  custom_theme + ",
        "+ ",
        "  theme(axis.text.x = element_blank(),",
        "+ ",
        "        axis.text.y = element_blank(),",
        "+ ",
        "        axis.ticks  = element_blank())",
        "> ",
        "> ",
        "mesh <- readRDS(file = \"data/example_4/mesh.RDS\")",
        "> ",
        "dual_mesh <- readRDS(file = \"data/example_5/dual_mesh.RDS\")",
        "> ",
        "wgt <- readRDS(file = \"data/example_5/wgt.RDS\")",
        "> ",
        "> ",
        "# Priors might differ",
        "> ",
        "spde <- inla.spde2.pcmatern(mesh = mesh, ",
        "+ ",
        "                            alpha = 2,",
        "+ ",
        "                            prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90",
        "+ ",
        "                            prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01",
        "> ",
        "> ",
        "# spde <- inla.spde2.matern(mesh = mesh, alpha = 2) ",
        "> ",
        "> ",
        "#########################",
        "> ",
        "#########################",
        "> ",
        "> ",
        "# As before...",
        "> ",
        "> ",
        "# Points coordinates",
        "> ",
        "data_coor <- sf::st_coordinates(data_USA)",
        "> ",
        "data_USA  <- bind_cols(data_USA, as_tibble(data_coor))",
        "> ",
        "data_USA  <- data_USA %>% rename(lon = X, lat = Y) %>% dplyr::select(mean, sd, lon, lat, geometry)",
        "> ",
        "> ",
        "> ",
        "# Boundary coordinates",
        "> ",
        "USA_coor <- sf::st_coordinates(USA)",
        "> ",
        "USA_coor <- matrix(c(USA_coor[, 1], USA_coor[, 2]), ncol = 2)",
        "> ",
        "colnames(USA_coor) <- c(\"lon\", \"lat\")",
        "> ",
        "> ",
        "#########################",
        "> ",
        "#########################",
        "> ",
        "> ",
        "# Data and projection matrices",
        "> ",
        "> ",
        "n_vtx <- mesh$n",
        "> ",
        "n_pts <- nrow(data_USA)",
        "> ",
        "> ",
        "coord_pred <- readRDS(file = \"data/example_4/coord_pred.RDS\")",
        "> ",
        "n_pts_pred <- nrow(coord_pred)",
        "> ",
        "> ",
        "indxs <- inla.spde.make.index(\"s\", spde$n.spde)",
        "> ",
        "indxv <- inla.spde.make.index(\"v\", spde$n.spde)",
        "> ",
        "> ",
        "y_pp <- rep(0:1, c(n_vtx, n_pts))",
        "> ",
        "e_pp <- c(wgt, rep(0, n_pts)) ",
        "> ",
        "imat <- Diagonal(n_vtx, rep(1, n_vtx))",
        "> ",
        "ymat <- inla.spde.make.A(mesh, data_coor)",
        "> ",
        "A_pp <- rbind(imat, ymat)",
        "> ",
        "# Prediction",
        "> ",
        "A_pp_p <- inla.spde.make.A(mesh = mesh, loc = coord_pred) ",
        "> ",
        "> ",
        "# Create stacks",
        "> ",
        "> ",
        "# `data` has two columns, one for each likelihood",
        "> ",
        "> ",
        "stk_y_e <- inla.stack(tag = \"est_y\",",
        "+ ",
        "                      data = list(y = cbind(data_USA$mean, NA), e = rep(NA, n_pts)),",
        "+ ",
        "                      A = list(1, ymat),",
        "+ ",
        "                      effects = list(mu = rep(1, n_pts), s = indxs)) ",
        "> ",
        "> ",
        "stk_y_p <- inla.stack(tag = \"pred_y\",",
        "+ ",
        "                      data = list(y = cbind(rep(NA, n_pts_pred), NA), e = rep(NA, n_pts_pred)),",
        "+ ",
        "                      A = list(1, A_pp_p),",
        "+ ",
        "                      effects = list(mu = rep(1, n_pts_pred), s = indxs)) ",
        "> ",
        "> ",
        "stk_pp_e <- inla.stack(tag = \"est_pp\",",
        "+ ",
        "                       data = list(y = cbind(NA, y_pp), e = e_pp),",
        "+ ",
        "                       A = list(1, A_pp),",
        "+ ",
        "                       effects = list(alpha = rep(1, n_vtx + n_pts), v = indxv))",
        "> ",
        "> ",
        "stk_pp_p <- inla.stack(tag = \"pred_pp\",",
        "+ ",
        "                       data = list(y = cbind(NA, rep(NA, n_pts_pred)), e = rep(1, n_pts_pred)),",
        "+ ",
        "                       A = list(1, A_pp_p),",
        "+ ",
        "                       effects = list(alpha = rep(1, n_pts_pred), v = indxv))",
        "> ",
        "> ",
        "> ",
        "# Full stack",
        "> ",
        "stk_full_pp_y <- inla.stack(stk_y_e, stk_pp_e, stk_y_p, stk_pp_p)",
        "> ",
        "> ",
        "# Fitting the model",
        "> ",
        "> ",
        "re_prior <- list(prior = \"gaussian\", param = c(0, 10))",
        "> ",
        "> ",
        "formula_1 <- y ~ 0 + mu + alpha + f(s, model = spde) + f(v, copy = \"s\", fixed = FALSE, hyper = list(beta = re_prior))",
        "> ",
        "> ",
        "model_6_1 <- inla(formula = formula_1,",
        "+ ",
        "                  family  = c(\"gaussian\", \"poisson\"), ",
        "+ ",
        "                  E = inla.stack.data(stk_full_pp_y)$e,",
        "+ ",
        "                  data = inla.stack.data(stk_full_pp_y), ",
        "+ ",
        "                  control.predictor = list(link = rep(c(1, 2), c((n_pts + n_pts_pred), (n_vtx + n_pts + n_pts_pred))),",
        "+ ",
        "                                           compute = TRUE,",
        "+ ",
        "                                           A = inla.stack.A(stk_full_pp_y)))",
        "> ",
        "> ",
        "saveRDS(object = model_6_1, file = \"models/model_6_1.RDS\")",
        "Warning message:\nIn saveRDS(object = model_6_1, file = \"models/model_6_1.RDS\") :\n  'package:stats' may not be available when loading\n",
        "> ",
        "> ",
        "summary(model_6_1)",
        "\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \", \" data = \n   data, quantiles = quantiles, E = E, offset = offset, \", \" scale = scale, weights = \n   weights, Ntrials = Ntrials, strata = strata, \", \" lp.scale = lp.scale, link.covariates \n   = link.covariates, verbose = verbose, \", \" lincomb = lincomb, selection = selection, \n   control.compute = control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inl",
        "a, control.fixed = \n   control.fixed, \", \" control.mode = control.mode, control.expert = control.expert, \", \" \n   control.hazard = control.hazard, control.lincomb = control.lincomb, \", \" control.update \n   = control.update, control.lp.scale = control.lp.scale, \", \" control.pardiso = \n   control.pardiso, only.hyperparam = only.hyperparam, \", \" inla.call = inla.call, \n   inla.arg = inla.arg, num.threads = num.threads, \", \" keep = keep, working.directory = \n   working.directory, silent = silent, \", \" inla.mode",
        " = inla.mode, safe = FALSE, debug = \n   debug, .parent.frame = .parent.frame)\" ) \nTime used:\n    Pre = 2.82, Running = 7.62, Post = 0.51, Total = 10.9 \nFixed effects:\n        mean    sd 0.025quant 0.5quant 0.975quant   mode kld\nmu     6.661 0.405      5.884    6.650      7.504  6.652   0\nalpha -9.256 0.236     -9.709   -9.263     -8.761 -9.262   0\n\nRandom effects:\n  Name\t  Model\n    s SPDE2 model\n   v Copy\n\nModel hyperparameters:\n                                           mean      sd 0.025quant 0.5quant 0.",
        "975quant    mode\nPrecision for the Gaussian observations   0.295   0.018      0.260    0.295      0.333   0.294\nRange for s                             912.866 250.717    529.498  876.566   1508.535 804.624\nStdev for s                               1.399   0.190      1.062    1.386      1.810   1.361\nBeta for v                                0.592   0.061      0.475    0.591      0.715   0.587\n\nMarginal log-Likelihood:  -11273.56 \n is computed \nPosterior summaries for the linear predictor and the fitted val",
        "ues are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n",
        "> ",
        "# Fitted values and prediction",
        "> ",
        "> ",
        "## Latent process",
        "> ",
        "> ",
        "idx_y  <- inla.stack.index(stk_full_pp_y, tag = \"pred_y\" )$data",
        "> ",
        "> ",
        "pred_y_mm  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"mean\"]))",
        "> ",
        "pred_y_ll  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"0.025quant\"]))",
        "> ",
        "pred_y_uu  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"0.975quant\"]))",
        "> ",
        "> ",
        "r_mm <- pred_y_mm$V3 %>% range()",
        "> ",
        "r_ll <- pred_y_mm$V3 %>% range()",
        "> ",
        "r_uu <- pred_y_mm$V3 %>% range()",
        "> ",
        "r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))",
        "> ",
        "> ",
        "pp_y_mm <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"Mean\")",
        "Warning message:\nIn CPL_crs_from_input(x) :\n  GDAL Message 1: +init=epsg:XXXX syntax is deprecated. It might return a CRS with a non-EPSG compliant axis order.\n",
        "> ",
        "pp_y_ll <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"2.5th\")",
        "> ",
        "pp_y_uu <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"97.5th\")",
        "> ",
        "> ",
        "(pp_y_ll + pp_y_mm + pp_y_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "> ",
        "> ",
        "## Intensity process",
        "> ",
        "> ",
        "idx_pp <- inla.stack.index(stk_full_pp_y, tag = \"pred_pp\")$data",
        "> ",
        "> ",
        "pred_pp_mm <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, \"mean\"]))",
        "> ",
        "pred_pp_ll <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, \"0.025quant\"]))",
        "> ",
        "pred_pp_uu <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, \"0.975quant\"]))",
        "> ",
        "> ",
        "# Expected number of observations",
        "> ",
        "sum(pred_pp_mm$V3 * (25 ** 2))",
        "[1] 916.692\n",
        "> ",
        "> ",
        "r_mm <- pred_pp_mm$V3 %>% range()",
        "> ",
        "r_ll <- pred_pp_ll$V3 %>% range()",
        "> ",
        "r_uu <- pred_pp_uu$V3 %>% range()",
        "> ",
        "r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))",
        "> ",
        "> ",
        "pp_pp_mm <- plot_pred_USA(fitted_values = pred_pp_mm, USA = USA, r = r, tt = \"Mean\",   should_round = FALSE)",
        "> ",
        "pp_pp_ll <- plot_pred_USA(fitted_values = pred_pp_ll, USA = USA, r = r, tt = \"2.5th\",  should_round = FALSE)",
        "> ",
        "pp_pp_uu <- plot_pred_USA(fitted_values = pred_pp_uu, USA = USA, r = r, tt = \"97.5th\", should_round = FALSE)",
        "> ",
        "> ",
        "(pp_pp_ll + pp_pp_mm + pp_pp_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "\nRestarting R session...\n\n",
        "> ",
        "library(\"INLA\")",
        "Loading required package: Matrix\nLoading required package: sp\nThis is INLA_23.09.09 built 2023-10-16 17:35:11 UTC.\n - See www.r-inla.org/contact-us for how to get help.\n",
        "> ",
        "library(\"tidyverse\")",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[",
        "34mtidyr    \u001B[39m 1.3.0\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mexpand()\u001B[39m masks \u001B[34mMatrix\u001B[39m::expand()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B",
        "[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mpack()\u001B[39m   masks \u001B[34mMatrix\u001B[39m::pack()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32munpack()\u001B[39m masks \u001B[34mMatrix\u001B[39m::unpack()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(\"sf\")",
        "Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n",
        "> ",
        "library(\"raster\")",
        "\nAttaching package: ‘raster’\n\nThe following object is masked from ‘package:dplyr’:\n\n    select\n\n",
        "> ",
        "library(\"patchwork\")",
        "\nAttaching package: ‘patchwork’\n\nThe following object is masked from ‘package:raster’:\n\n    area\n\n",
        "> ",
        "> ",
        "custom_theme <-  theme_bw() + theme(legend.position = \"right\", ",
        "+ ",
        "                                    text = element_text(size = 14, family = \"LM Roman 10\"),",
        "+ ",
        "                                    plot.title = element_text(size = 16),",
        "+ ",
        "                                    legend.title = element_text(size = 12))",
        "> ",
        "> ",
        "plot_pred_USA <- function (fitted_values, USA, r, tt = \"\", should_round = TRUE, ...) {",
        "+ ",
        "  ",
        "+ ",
        "  coordinates(fitted_values) <- ~ x + y",
        "+ ",
        "  gridded(fitted_values) <- TRUE",
        "+ ",
        "  fitted_values <- raster(fitted_values)",
        "+ ",
        "  crs(fitted_values) <- \"+init=epsg:6345 +units=km +no_defs\"",
        "+ ",
        "  ",
        "+ ",
        "  fitted_values    <- as(fitted_values, \"SpatialPixelsDataFrame\")",
        "+ ",
        "  fitted_values_df <- as.data.frame(fitted_values)",
        "+ ",
        "  colnames(fitted_values_df) <- c(\"pred\", \"x\", \"y\")",
        "+ ",
        "  ",
        "+ ",
        "  if (should_round) {",
        "+ ",
        "    breaks <- seq(floor(r[1]), ceiling(r[2]), length.out = 5)",
        "+ ",
        "  } else {",
        "+ ",
        "    breaks <- seq(r[1], r[2], length.out = 5)",
        "+ ",
        "  }",
        "+ ",
        "  pp <- ggplot() +",
        "+ ",
        "    geom_tile(data = fitted_values_df, mapping = aes(x = x, y = y, fill = pred)) + ",
        "+ ",
        "    geom_sf(data = USA, color = \"black\", fill = NA, lwd = 0.5) +",
        "+ ",
        "    scale_fill_gradientn(name = \"PM2.5\", colors = rainbow(9, start = 0.1, end = 0.9), breaks = breaks, limits = c(breaks[1], tail(breaks, 1))) + ",
        "+ ",
        "    labs(x = \"\", y = \"\", title = tt) + ",
        "+ ",
        "    custom_theme + ",
        "+ ",
        "    theme(axis.text.x = element_blank(),",
        "+ ",
        "          axis.text.y = element_blank(),",
        "+ ",
        "          axis.ticks  = element_blank())",
        "+ ",
        "  ",
        "+ ",
        "  pp",
        "+ ",
        "} ",
        "> ",
        "> ",
        "##################################################",
        "> ",
        "##################################################",
        "> ",
        "> ",
        "data_USA <- readRDS(file = \"data/example_4/data_USA.rds\")",
        "> ",
        "USA <- readRDS(file = \"data/example_4/USA_filtered.rds\")",
        "> ",
        "> ",
        "ggplot() + ",
        "+ ",
        "  geom_sf(data = USA, fill = \"white\") +",
        "+ ",
        "  geom_sf(data = data_USA, aes(fill = mean), color = \"black\", size = 3, shape = 21) +",
        "+ ",
        "  scale_fill_gradientn(name = \"PM2.5 level\", colors = rainbow(9, start = 0.1, end = 0.9)) + ",
        "+ ",
        "  labs(x = \"\", y = \"\", title = \"\") +",
        "+ ",
        "  custom_theme + ",
        "+ ",
        "  theme(axis.text.x = element_blank(),",
        "+ ",
        "        axis.text.y = element_blank(),",
        "+ ",
        "        axis.ticks  = element_blank())",
        "> ",
        "> ",
        "mesh <- readRDS(file = \"data/example_4/mesh.RDS\")",
        "> ",
        "dual_mesh <- readRDS(file = \"data/example_5/dual_mesh.RDS\")",
        "> ",
        "wgt <- readRDS(file = \"data/example_5/wgt.RDS\")",
        "> ",
        "> ",
        "# Priors might differ",
        "> ",
        "spde <- inla.spde2.pcmatern(mesh = mesh, ",
        "+ ",
        "                            alpha = 2,",
        "+ ",
        "                            prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90",
        "+ ",
        "                            prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01",
        "> ",
        "> ",
        "# spde <- inla.spde2.matern(mesh = mesh, alpha = 2) ",
        "> ",
        "> ",
        "#########################",
        "> ",
        "#########################",
        "> ",
        "> ",
        "# As before...",
        "> ",
        "> ",
        "# Points coordinates",
        "> ",
        "data_coor <- sf::st_coordinates(data_USA)",
        "> ",
        "data_USA  <- bind_cols(data_USA, as_tibble(data_coor))",
        "> ",
        "data_USA  <- data_USA %>% rename(lon = X, lat = Y) %>% dplyr::select(mean, sd, lon, lat, geometry)",
        "> ",
        "> ",
        "> ",
        "# Boundary coordinates",
        "> ",
        "USA_coor <- sf::st_coordinates(USA)",
        "> ",
        "USA_coor <- matrix(c(USA_coor[, 1], USA_coor[, 2]), ncol = 2)",
        "> ",
        "colnames(USA_coor) <- c(\"lon\", \"lat\")",
        "> ",
        "> ",
        "#########################",
        "> ",
        "#########################",
        "> ",
        "> ",
        "# Data and projection matrices",
        "> ",
        "> ",
        "n_vtx <- mesh$n",
        "> ",
        "n_pts <- nrow(data_USA)",
        "> ",
        "> ",
        "coord_pred <- readRDS(file = \"data/example_4/coord_pred.RDS\")",
        "> ",
        "n_pts_pred <- nrow(coord_pred)",
        "> ",
        "> ",
        "indxs <- inla.spde.make.index(\"s\", spde$n.spde)",
        "> ",
        "indxv <- inla.spde.make.index(\"v\", spde$n.spde)",
        "> ",
        "> ",
        "y_pp <- rep(0:1, c(n_vtx, n_pts))",
        "> ",
        "e_pp <- c(wgt, rep(0, n_pts)) ",
        "> ",
        "imat <- Diagonal(n_vtx, rep(1, n_vtx))",
        "> ",
        "ymat <- inla.spde.make.A(mesh, data_coor)",
        "> ",
        "A_pp <- rbind(imat, ymat)",
        "> ",
        "# Prediction",
        "> ",
        "A_pp_p <- inla.spde.make.A(mesh = mesh, loc = coord_pred) ",
        "> ",
        "> ",
        "# Create stacks",
        "> ",
        "> ",
        "# `data` has two columns, one for each likelihood",
        "> ",
        "> ",
        "stk_y_e <- inla.stack(tag = \"est_y\",",
        "+ ",
        "                      data = list(y = cbind(data_USA$mean, NA), e = rep(NA, n_pts)),",
        "+ ",
        "                      A = list(1, ymat),",
        "+ ",
        "                      effects = list(mu = rep(1, n_pts), s = indxs)) ",
        "> ",
        "> ",
        "stk_y_p <- inla.stack(tag = \"pred_y\",",
        "+ ",
        "                      data = list(y = cbind(rep(NA, n_pts_pred), NA), e = rep(NA, n_pts_pred)),",
        "+ ",
        "                      A = list(1, A_pp_p),",
        "+ ",
        "                      effects = list(mu = rep(1, n_pts_pred), s = indxs)) ",
        "> ",
        "> ",
        "stk_pp_e <- inla.stack(tag = \"est_pp\",",
        "+ ",
        "                       data = list(y = cbind(NA, y_pp), e = e_pp),",
        "+ ",
        "                       A = list(1, A_pp),",
        "+ ",
        "                       effects = list(alpha_pp = rep(1, n_vtx + n_pts), v = indxv))",
        "> ",
        "> ",
        "stk_pp_p <- inla.stack(tag = \"pred_pp\",",
        "+ ",
        "                       data = list(y = cbind(NA, rep(NA, n_pts_pred)), e = rep(1, n_pts_pred)),",
        "+ ",
        "                       A = list(1, A_pp_p),",
        "+ ",
        "                       effects = list(alpha_pp = rep(1, n_pts_pred), v = indxv))",
        "> ",
        "> ",
        "> ",
        "# Full stack",
        "> ",
        "stk_full_pp_y <- inla.stack(stk_y_e, stk_pp_e, stk_y_p, stk_pp_p)",
        "> ",
        "> ",
        "# Fitting the model",
        "> ",
        "> ",
        "re_prior <- list(prior = \"gaussian\", param = c(0, 10))",
        "> ",
        "> ",
        "formula_1 <- y ~ 0 + mu + alpha_pp + f(s, model = spde) + f(v, copy = \"s\", fixed = FALSE, hyper = list(beta = re_prior))",
        "> ",
        "> ",
        "model_6_1 <- inla(formula = formula_1,",
        "+ ",
        "                  family  = c(\"gaussian\", \"poisson\"), ",
        "+ ",
        "                  E = inla.stack.data(stk_full_pp_y)$e,",
        "+ ",
        "                  data = inla.stack.data(stk_full_pp_y), ",
        "+ ",
        "                  control.predictor = list(link = rep(c(1, 2), c((n_pts + n_pts_pred), (n_vtx + n_pts + n_pts_pred))),",
        "+ ",
        "                                           compute = TRUE,",
        "+ ",
        "                                           A = inla.stack.A(stk_full_pp_y)))",
        "> ",
        "> ",
        "saveRDS(object = model_6_1, file = \"models/model_6_1.RDS\")",
        "Warning message:\nIn saveRDS(object = model_6_1, file = \"models/model_6_1.RDS\") :\n  'package:stats' may not be available when loading\n",
        "> ",
        "> ",
        "summary(model_6_1)",
        "\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \", \" data = \n   data, quantiles = quantiles, E = E, offset = offset, \", \" scale = scale, weights = \n   weights, Ntrials = Ntrials, strata = strata, \", \" lp.scale = lp.scale, link.covariates \n   = link.covariates, verbose = verbose, \", \" lincomb = lincomb, selection = selection, \n   control.compute = control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inl",
        "a, control.fixed = \n   control.fixed, \", \" control.mode = control.mode, control.expert = control.expert, \", \" \n   control.hazard = control.hazard, control.lincomb = control.lincomb, \", \" control.update \n   = control.update, control.lp.scale = control.lp.scale, \", \" control.pardiso = \n   control.pardiso, only.hyperparam = only.hyperparam, \", \" inla.call = inla.call, \n   inla.arg = inla.arg, num.threads = num.threads, \", \" keep = keep, working.directory = \n   working.directory, silent = silent, \", \" inla.mode",
        " = inla.mode, safe = FALSE, debug = \n   debug, .parent.frame = .parent.frame)\" ) \nTime used:\n    Pre = 2.64, Running = 7.28, Post = 0.453, Total = 10.4 \nFixed effects:\n           mean    sd 0.025quant 0.5quant 0.975quant   mode kld\nmu        6.661 0.399      5.888    6.653      7.482  6.654   0\nalpha_pp -9.256 0.232     -9.705   -9.262     -8.774 -9.261   0\n\nRandom effects:\n  Name\t  Model\n    s SPDE2 model\n   v Copy\n\nModel hyperparameters:\n                                           mean      sd 0.025quant 0",
        ".5quant 0.975quant    mode\nPrecision for the Gaussian observations   0.295   0.018      0.260    0.294      0.333   0.293\nRange for s                             875.252 169.020    591.199  858.849   1254.105 826.223\nStdev for s                               1.386   0.177      1.065    1.376      1.761   1.360\nBeta for v                                0.592   0.062      0.473    0.591      0.717   0.587\n\nMarginal log-Likelihood:  -11273.81 \n is computed \nPosterior summaries for the linear predictor and the ",
        "fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n\nRestarting R session...\n\n",
        "> ",
        "library(\"INLA\")",
        "Loading required package: Matrix\nLoading required package: sp\nThis is INLA_23.09.09 built 2023-10-16 17:35:11 UTC.\n - See www.r-inla.org/contact-us for how to get help.\n",
        "> ",
        "library(\"tidyverse\")",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.4     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.5\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.1\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.5.0     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.3     \u001B[32m✔\u001B[39m \u001B[",
        "34mtidyr    \u001B[39m 1.3.0\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n── \u001B[1mConflicts\u001B[22m ──────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mexpand()\u001B[39m masks \u001B[34mMatrix\u001B[39m::expand()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B",
        "[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mpack()\u001B[39m   masks \u001B[34mMatrix\u001B[39m::pack()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32munpack()\u001B[39m masks \u001B[34mMatrix\u001B[39m::unpack()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(\"sf\")",
        "Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n",
        "> ",
        "library(\"raster\")",
        "\nAttaching package: ‘raster’\n\nThe following object is masked from ‘package:dplyr’:\n\n    select\n\n",
        "> ",
        "library(\"patchwork\")",
        "\nAttaching package: ‘patchwork’\n\nThe following object is masked from ‘package:raster’:\n\n    area\n\n",
        "> ",
        "> ",
        "custom_theme <-  theme_bw() + theme(legend.position = \"right\", ",
        "+ ",
        "                                    text = element_text(size = 14, family = \"LM Roman 10\"),",
        "+ ",
        "                                    plot.title = element_text(size = 16),",
        "+ ",
        "                                    legend.title = element_text(size = 12))",
        "> ",
        "> ",
        "plot_pred_USA <- function (fitted_values, USA, r, tt = \"\", should_round = TRUE, ...) {",
        "+ ",
        "  ",
        "+ ",
        "  coordinates(fitted_values) <- ~ x + y",
        "+ ",
        "  gridded(fitted_values) <- TRUE",
        "+ ",
        "  fitted_values <- raster(fitted_values)",
        "+ ",
        "  crs(fitted_values) <- \"+init=epsg:6345 +units=km +no_defs\"",
        "+ ",
        "  ",
        "+ ",
        "  fitted_values    <- as(fitted_values, \"SpatialPixelsDataFrame\")",
        "+ ",
        "  fitted_values_df <- as.data.frame(fitted_values)",
        "+ ",
        "  colnames(fitted_values_df) <- c(\"pred\", \"x\", \"y\")",
        "+ ",
        "  ",
        "+ ",
        "  if (should_round) {",
        "+ ",
        "    breaks <- seq(floor(r[1]), ceiling(r[2]), length.out = 5)",
        "+ ",
        "  } else {",
        "+ ",
        "    breaks <- seq(r[1], r[2], length.out = 5)",
        "+ ",
        "  }",
        "+ ",
        "  pp <- ggplot() +",
        "+ ",
        "    geom_tile(data = fitted_values_df, mapping = aes(x = x, y = y, fill = pred)) + ",
        "+ ",
        "    geom_sf(data = USA, color = \"black\", fill = NA, lwd = 0.5) +",
        "+ ",
        "    scale_fill_gradientn(name = \"PM2.5\", colors = rainbow(9, start = 0.1, end = 0.9), breaks = breaks, limits = c(breaks[1], tail(breaks, 1))) + ",
        "+ ",
        "    labs(x = \"\", y = \"\", title = tt) + ",
        "+ ",
        "    custom_theme + ",
        "+ ",
        "    theme(axis.text.x = element_blank(),",
        "+ ",
        "          axis.text.y = element_blank(),",
        "+ ",
        "          axis.ticks  = element_blank())",
        "+ ",
        "  ",
        "+ ",
        "  pp",
        "+ ",
        "} ",
        "> ",
        "> ",
        "##################################################",
        "> ",
        "##################################################",
        "> ",
        "> ",
        "data_USA <- readRDS(file = \"data/example_4/data_USA.rds\")",
        "> ",
        "USA <- readRDS(file = \"data/example_4/USA_filtered.rds\")",
        "> ",
        "> ",
        "ggplot() + ",
        "+ ",
        "  geom_sf(data = USA, fill = \"white\") +",
        "+ ",
        "  geom_sf(data = data_USA, aes(fill = mean), color = \"black\", size = 3, shape = 21) +",
        "+ ",
        "  scale_fill_gradientn(name = \"PM2.5 level\", colors = rainbow(9, start = 0.1, end = 0.9)) + ",
        "+ ",
        "  labs(x = \"\", y = \"\", title = \"\") +",
        "+ ",
        "  custom_theme + ",
        "+ ",
        "  theme(axis.text.x = element_blank(),",
        "+ ",
        "        axis.text.y = element_blank(),",
        "+ ",
        "        axis.ticks  = element_blank())",
        "> ",
        "> ",
        "mesh <- readRDS(file = \"data/example_4/mesh.RDS\")",
        "> ",
        "dual_mesh <- readRDS(file = \"data/example_5/dual_mesh.RDS\")",
        "> ",
        "wgt <- readRDS(file = \"data/example_5/wgt.RDS\")",
        "> ",
        "> ",
        "# Priors might differ",
        "> ",
        "spde <- inla.spde2.pcmatern(mesh = mesh, ",
        "+ ",
        "                            alpha = 2,",
        "+ ",
        "                            prior.range = c(1e3, 0.90), # P(range < 1e3) = 0.90",
        "+ ",
        "                            prior.sigma = c(1.0, 0.01)) # P(sigma > 1.0) = 0.01",
        "> ",
        "> ",
        "# spde <- inla.spde2.matern(mesh = mesh, alpha = 2) ",
        "> ",
        "> ",
        "#########################",
        "> ",
        "#########################",
        "> ",
        "> ",
        "# As before...",
        "> ",
        "> ",
        "# Points coordinates",
        "> ",
        "data_coor <- sf::st_coordinates(data_USA)",
        "> ",
        "data_USA  <- bind_cols(data_USA, as_tibble(data_coor))",
        "> ",
        "data_USA  <- data_USA %>% rename(lon = X, lat = Y) %>% dplyr::select(mean, sd, lon, lat, geometry)",
        "> ",
        "> ",
        "> ",
        "# Boundary coordinates",
        "> ",
        "USA_coor <- sf::st_coordinates(USA)",
        "> ",
        "USA_coor <- matrix(c(USA_coor[, 1], USA_coor[, 2]), ncol = 2)",
        "> ",
        "colnames(USA_coor) <- c(\"lon\", \"lat\")",
        "> ",
        "> ",
        "#########################",
        "> ",
        "#########################",
        "> ",
        "> ",
        "# Data and projection matrices",
        "> ",
        "> ",
        "n_vtx <- mesh$n",
        "> ",
        "n_pts <- nrow(data_USA)",
        "> ",
        "> ",
        "coord_pred <- readRDS(file = \"data/example_4/coord_pred.RDS\")",
        "> ",
        "n_pts_pred <- nrow(coord_pred)",
        "> ",
        "> ",
        "indxs <- inla.spde.make.index(\"s\", spde$n.spde)",
        "> ",
        "indxv <- inla.spde.make.index(\"v\", spde$n.spde)",
        "> ",
        "> ",
        "y_pp <- rep(0:1, c(n_vtx, n_pts))",
        "> ",
        "e_pp <- c(wgt, rep(0, n_pts)) ",
        "> ",
        "imat <- Diagonal(n_vtx, rep(1, n_vtx))",
        "> ",
        "ymat <- inla.spde.make.A(mesh, data_coor)",
        "> ",
        "A_pp <- rbind(imat, ymat)",
        "> ",
        "# Prediction",
        "> ",
        "A_pp_p <- inla.spde.make.A(mesh = mesh, loc = coord_pred) ",
        "> ",
        "> ",
        "# Create stacks",
        "> ",
        "> ",
        "# `data` has two columns, one for each likelihood",
        "> ",
        "> ",
        "stk_y_e <- inla.stack(tag = \"est_y\",",
        "+ ",
        "                      data = list(y = cbind(data_USA$mean, NA), e = rep(NA, n_pts)),",
        "+ ",
        "                      A = list(1, ymat),",
        "+ ",
        "                      effects = list(mu = rep(1, n_pts), s = indxs)) ",
        "> ",
        "> ",
        "stk_y_p <- inla.stack(tag = \"pred_y\",",
        "+ ",
        "                      data = list(y = cbind(rep(NA, n_pts_pred), NA), e = rep(NA, n_pts_pred)),",
        "+ ",
        "                      A = list(1, A_pp_p),",
        "+ ",
        "                      effects = list(mu = rep(1, n_pts_pred), s = indxs)) ",
        "> ",
        "> ",
        "stk_pp_e <- inla.stack(tag = \"est_pp\",",
        "+ ",
        "                       data = list(y = cbind(NA, y_pp), e = e_pp),",
        "+ ",
        "                       A = list(1, A_pp),",
        "+ ",
        "                       effects = list(alpha_pp = rep(1, n_vtx + n_pts), v = indxv))",
        "> ",
        "> ",
        "stk_pp_p <- inla.stack(tag = \"pred_pp\",",
        "+ ",
        "                       data = list(y = cbind(NA, rep(NA, n_pts_pred)), e = rep(1, n_pts_pred)),",
        "+ ",
        "                       A = list(1, A_pp_p),",
        "+ ",
        "                       effects = list(alpha_pp = rep(1, n_pts_pred), v = indxv))",
        "> ",
        "> ",
        "> ",
        "# Full stack",
        "> ",
        "stk_full_pp_y <- inla.stack(stk_y_e, stk_y_p, stk_pp_e, stk_pp_p)",
        "> ",
        "> ",
        "# Fitting the model",
        "> ",
        "> ",
        "re_prior <- list(prior = \"gaussian\", param = c(0, 10))",
        "> ",
        "> ",
        "formula_1 <- y ~ 0 + mu + alpha_pp + f(s, model = spde) + f(v, copy = \"s\", fixed = FALSE, hyper = list(beta = re_prior))",
        "> ",
        "> ",
        "model_6_1 <- inla(formula = formula_1,",
        "+ ",
        "                  family  = c(\"gaussian\", \"poisson\"), ",
        "+ ",
        "                  E = inla.stack.data(stk_full_pp_y)$e,",
        "+ ",
        "                  data = inla.stack.data(stk_full_pp_y), ",
        "+ ",
        "                  control.predictor = list(link = rep(c(1, 2), c((n_pts + n_pts_pred), (n_vtx + n_pts + n_pts_pred))),",
        "+ ",
        "                                           compute = TRUE,",
        "+ ",
        "                                           A = inla.stack.A(stk_full_pp_y)))",
        "> ",
        "> ",
        "saveRDS(object = model_6_1, file = \"models/model_6_1.RDS\")",
        "Warning message:\nIn saveRDS(object = model_6_1, file = \"models/model_6_1.RDS\") :\n  'package:stats' may not be available when loading\n",
        "> ",
        "> ",
        "summary(model_6_1)",
        "\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \", \" data = \n   data, quantiles = quantiles, E = E, offset = offset, \", \" scale = scale, weights = \n   weights, Ntrials = Ntrials, strata = strata, \", \" lp.scale = lp.scale, link.covariates \n   = link.covariates, verbose = verbose, \", \" lincomb = lincomb, selection = selection, \n   control.compute = control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inl",
        "a, control.fixed = \n   control.fixed, \", \" control.mode = control.mode, control.expert = control.expert, \", \" \n   control.hazard = control.hazard, control.lincomb = control.lincomb, \", \" control.update \n   = control.update, control.lp.scale = control.lp.scale, \", \" control.pardiso = \n   control.pardiso, only.hyperparam = only.hyperparam, \", \" inla.call = inla.call, \n   inla.arg = inla.arg, num.threads = num.threads, \", \" keep = keep, working.directory = \n   working.directory, silent = silent, \", \" inla.mode",
        " = inla.mode, safe = FALSE, debug = \n   debug, .parent.frame = .parent.frame)\" ) \nTime used:\n    Pre = 2.61, Running = 6.94, Post = 0.479, Total = 10 \nFixed effects:\n           mean    sd 0.025quant 0.5quant 0.975quant   mode kld\nmu        6.664 0.400      5.892    6.655      7.490  6.656   0\nalpha_pp -9.256 0.234     -9.708   -9.262     -8.769 -9.261   0\n\nRandom effects:\n  Name\t  Model\n    s SPDE2 model\n   v Copy\n\nModel hyperparameters:\n                                           mean      sd 0.025quant 0.5",
        "quant 0.975quant    mode\nPrecision for the Gaussian observations   0.295   0.018      0.262    0.295      0.332   0.294\nRange for s                             886.131 196.526    563.893  864.474   1333.690 822.003\nStdev for s                               1.400   0.172      1.093    1.389      1.769   1.366\nBeta for v                                0.586   0.057      0.473    0.586      0.698   0.586\n\nMarginal log-Likelihood:  -11273.75 \n is computed \nPosterior summaries for the linear predictor and the fi",
        "tted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n\n",
        "> ",
        "> ",
        "# Fitted values and prediction",
        "> ",
        "> ",
        "## Latent process",
        "> ",
        "> ",
        "idx_y  <- inla.stack.index(stk_full_pp_y, tag = \"pred_y\" )$data",
        "> ",
        "> ",
        "pred_y_mm  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"mean\"]))",
        "> ",
        "pred_y_ll  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"0.025quant\"]))",
        "> ",
        "pred_y_uu  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"0.975quant\"]))",
        "> ",
        "> ",
        "r_mm <- pred_y_mm$V3 %>% range()",
        "> ",
        "r_ll <- pred_y_mm$V3 %>% range()",
        "> ",
        "r_uu <- pred_y_mm$V3 %>% range()",
        "> ",
        "r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))",
        "> ",
        "> ",
        "pp_y_mm <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"Mean\")",
        "Warning message:\nIn CPL_crs_from_input(x) :\n  GDAL Message 1: +init=epsg:XXXX syntax is deprecated. It might return a CRS with a non-EPSG compliant axis order.\n",
        "> ",
        "pp_y_ll <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"2.5th\")",
        "> ",
        "pp_y_uu <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"97.5th\")",
        "> ",
        "> ",
        "(pp_y_ll + pp_y_mm + pp_y_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "> ",
        "> ",
        "## Intensity process",
        "> ",
        "> ",
        "idx_pp <- inla.stack.index(stk_full_pp_y, tag = \"pred_pp\")$data",
        "> ",
        "> ",
        "pred_pp_mm <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, \"mean\"]))",
        "> ",
        "pred_pp_ll <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, \"0.025quant\"]))",
        "> ",
        "pred_pp_uu <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_pp, \"0.975quant\"]))",
        "> ",
        "> ",
        "# Expected number of observations",
        "> ",
        "sum(pred_pp_mm$V3 * (25 ** 2))",
        "[1] 916.9467\n",
        "> ",
        "> ",
        "r_mm <- pred_pp_mm$V3 %>% range()",
        "> ",
        "r_ll <- pred_pp_ll$V3 %>% range()",
        "> ",
        "r_uu <- pred_pp_uu$V3 %>% range()",
        "> ",
        "r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))",
        "> ",
        "> ",
        "pp_pp_mm <- plot_pred_USA(fitted_values = pred_pp_mm, USA = USA, r = r, tt = \"Mean\",   should_round = FALSE)",
        "> ",
        "pp_pp_ll <- plot_pred_USA(fitted_values = pred_pp_ll, USA = USA, r = r, tt = \"2.5th\",  should_round = FALSE)",
        "> ",
        "pp_pp_uu <- plot_pred_USA(fitted_values = pred_pp_uu, USA = USA, r = r, tt = \"97.5th\", should_round = FALSE)",
        "> ",
        "> ",
        "(pp_pp_ll + pp_pp_mm + pp_pp_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "> ",
        "pp_y_mm <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"Mean\")",
        "> ",
        "pp_y_ll <- plot_pred_USA(fitted_values = pred_y_ll, USA = USA, r = r, tt = \"2.5th\")",
        "> ",
        "pp_y_uu <- plot_pred_USA(fitted_values = pred_y_uu, USA = USA, r = r, tt = \"97.5th\")",
        "> ",
        "(pp_y_ll + pp_y_mm + pp_y_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "> ",
        "idx_y  <- inla.stack.index(stk_full_pp_y, tag = \"pred_y\" )$data",
        "> ",
        "pred_y_mm  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"mean\"]))",
        "> ",
        "pred_y_ll  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"0.025quant\"]))",
        "> ",
        "pred_y_uu  <- as.data.frame(cbind(coord_pred, model_6_1$summary.fitted.values[idx_y,  \"0.975quant\"]))",
        "> ",
        "r_mm <- pred_y_mm$V3 %>% range()",
        "> ",
        "r_ll <- pred_y_ll$V3 %>% range()",
        "> ",
        "r_uu <- pred_y_uu$V3 %>% range()",
        "> ",
        "r <- c(min(r_mm[1], r_ll[1], r_uu[1]), max(r_mm[2], r_ll[2], r_uu[2]))",
        "> ",
        "r",
        "[1]  2.125471 10.684671\n",
        "> ",
        "pp_y_mm <- plot_pred_USA(fitted_values = pred_y_mm, USA = USA, r = r, tt = \"Mean\")",
        "> ",
        "pp_y_ll <- plot_pred_USA(fitted_values = pred_y_ll, USA = USA, r = r, tt = \"2.5th\")",
        "> ",
        "pp_y_uu <- plot_pred_USA(fitted_values = pred_y_uu, USA = USA, r = r, tt = \"97.5th\")",
        "> ",
        "(pp_y_ll + pp_y_mm + pp_y_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "> ",
        "(pp_pp_ll + pp_pp_mm + pp_pp_uu) + plot_layout(guides = \"collect\") & theme(legend.position = \"right\")",
        "\nRestarting R session...\n\n",
        "> ",
        "1/2",
        "[1] 0.5\n\nRestarting R session...\n\n"
    ]
}